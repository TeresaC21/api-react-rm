{"version":3,"sources":["components/Character.jsx","components/PaginationListCharacters.jsx","components/ListCharacters.jsx","components/HeaderCharacters.jsx","components/Spinner.jsx","components/SearchForm.jsx","components/CharactersContainer.jsx","pages/Episodes.jsx","Routes.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Character","character","className","style","width","src","image","alt","name","status","species","gender","PaginationListaCharacters","nextPage","prevoiousPage","aria-label","role","onClick","ListCharacters","characters","type","map","key","id","PaginationListCharacters","HeaderCharacters","Spinner","SearchForm","handleSubmitSearchCharacter","handleChange","onSubmit","onChange","CharactersContainer","useState","setCharacters","isLoading","setIsLoading","pagination","setPagination","totalCharacters","setTotalCharacters","filterName","setFilterName","fetchCharacters","a","axios","get","response","data","results","info","count","useEffect","e","preventDefault","target","value","Episodes","episode","Routes","exact","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.067cf35e.chunk.js","sourcesContent":["import React from 'react'\n\nconst Character = ({ character }) => {\n    return (\n        <div className=\"col my-2\">\n            <div className=\"card\" style={{ width: \"17rem\" }}>\n                <img src={character.image} className=\"card-img-top\" alt={character.name} />\n                <div className=\"card-body\">\n                    <h5 className=\"card-title\">{character.name}</h5>\n                    <p className=\"card-text\">\n                        <p className=\"d-flex\"><span className=\"badge badge-success mr-1\">Status:</span>{character.status}</p>\n                        <p className=\"d-flex\"><span className=\"badge badge-warning mr-1\">Species:</span>{character.species}</p>\n                        <p className=\"d-flex\"><span className=\"badge badge-info mr-1\">Gender:</span>{character.gender}</p>\n                    </p>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Character;","import React from 'react'\n\nconst PaginationListaCharacters = ({ nextPage, prevoiousPage }) => {\n    return (\n        <nav aria-label=\"Page navigation example\">\n            <ul className=\"pagination\">\n                <li className=\"page-item\" role=\"button\" onClick={prevoiousPage}><a className=\"page-link\">Previous</a></li>\n                <li className=\"page-item\" role=\"button\" onClick={nextPage}><a className=\"page-link\">Next</a></li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default PaginationListaCharacters;","import React from 'react'\n\n// Components\nimport Character from \"./Character\";\nimport PaginationListCharacters from \"./PaginationListCharacters\";\n\n\nconst ListCharacters = ({ characters, nextPage, prevoiousPage }) => {\n\n    return (\n        <>\n            <button type=\"button\" className=\"btn btn-outline-success\">Episodes</button>\n            <div className=\"row row-cols-4 mt-5\">\n                {characters.map(character => {\n                    return (\n                        <Character key={character.id} character={character} />\n                    )\n                })}\n            </div>\n            <div className=\"row justify-content-center\">\n                <PaginationListCharacters nextPage={nextPage} prevoiousPage={prevoiousPage} />\n            </div>\n        </>\n    );\n}\n\nexport default ListCharacters;\n","import React from 'react'\n\nconst HeaderCharacters = () => {\n    return (\n        <div className=\"row\">\n            <div className=\"col-12 d-flex justify-content-center\">\n                <h1 className=\"mr-3\">List characters Rick & Morty</h1>\n            </div>\n        </div>\n    );\n}\n\nexport default HeaderCharacters;","import React from 'react'\n\nconst Spinner = () => {\n    return (\n        <div className=\"col-12 d-flex justify-content-center mt-5\">\n            <div className=\"spinner-border text-danger\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Spinner;","import React from 'react'\n\nconst SearchForm = ({ handleSubmitSearchCharacter, handleChange }) => {\n    return (\n        <form onSubmit={handleSubmitSearchCharacter}>\n            <div className=\"form-group\">\n                <label>Search Character</label>\n                <input onChange={handleChange} type=\"text\" className=\"form-control\" />\n            </div>\n        </form>\n    );\n}\n\nexport default SearchForm;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\n//Components\nimport ListCharacters from \"./ListCharacters\";\nimport HeaderCharacters from \"./HeaderCharacters\";\nimport Spinner from \"./Spinner\";\nimport SearchForm from './SearchForm';\n\n\nconst CharactersContainer = () => {\n    /*************** States ***************/\n    const [characters, setCharacters] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [pagination, setPagination] = useState(1);\n    const [totalCharacters, setTotalCharacters] = useState(0);\n    const [filterName, setFilterName] = useState('');\n\n    /*************** Functions ***************/\n    const url = 'https://rickandmortyapi.com/api/character';\n    const fetchCharacters = async () => {\n        setIsLoading(true);\n        const response = await axios.get(`${url}?page=${pagination}&name=${filterName}`);\n        setCharacters(response.data.results);\n        setTotalCharacters(response.data.info.count);\n        setIsLoading(false);\n    }\n\n    const nextPage = () => {\n        if (totalCharacters > 20) {\n            setPagination(pagination + 1);\n        }\n    }\n\n    const prevoiousPage = () => {\n        if (pagination > 1) {\n            setPagination(pagination - 1);\n        }\n    }\n\n    const handleSubmitSearchCharacter = (e) => {\n        e.preventDefault();\n        setPagination(1);\n        fetchCharacters();\n    }\n\n    const handleChange = (e) => {\n        setFilterName(e.target.value);\n    }\n\n    /*************** Lifecycle ***************/\n    useEffect(() => {\n        fetchCharacters();\n    }, [pagination])\n\n    return (\n        <div className=\"container py-4\">\n            <HeaderCharacters />\n            <SearchForm handleSubmitSearchCharacter={handleSubmitSearchCharacter} handleChange={handleChange} />\n            {isLoading\n                ? <Spinner />\n                : <ListCharacters\n                    characters={characters}\n                    nextPage={nextPage}\n                    prevoiousPage={prevoiousPage}\n                />\n            }\n        </div>\n    );\n}\n\nexport default CharactersContainer;","import React from 'react';\n\nconst Episodes = ({ characters }) => {\n    return (\n        <>\n            <h1>Filer Episodes Characters</h1>\n            <div className=\"row row-cols-4 mt-5\">\n                {characters.map(character => {\n                    return (\n                        /*   <Character key={character.id} character={character} /> */\n                        <div className=\"col my-2\">\n                            <div className=\"card\" style={{ width: \"17rem\" }}>\n                                <img src={character.image} className=\"card-img-top\" alt={character.name} />\n                                <div className=\"card-body\">\n                                    <h5 className=\"card-title\">{character.name}</h5>\n                                    <p className=\"card-text\">\n                                        <p className=\"d-flex\"><span className=\"badge badge-success mr-1\">Episode:</span>{character.episode}</p>\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    )\n                })}\n            </div>\n        </>\n    );\n}\n\nexport default Episodes;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\n\n// Components\nimport CharactersContainer from './components/CharactersContainer';\nimport Episodes from './pages/Episodes';\n\nconst Routes = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\" component={CharactersContainer} />\n                <Route exact path=\"/Episodes\" component={Episodes} />\n            </Switch>\n        </Router>\n    );\n}\n\nexport default Routes;","import React from 'react';\nimport Routes from './Routes';\n\nfunction App() {\n\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}